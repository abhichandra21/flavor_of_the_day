#!/usr/bin/env bash

set -e

cd "$(dirname "$0")/.."

echo "üåê Testing Provider Connectivity"
echo "==============================="

# Try to use virtual environment if available
if [ -d "venv" ] && [ -f "venv/bin/activate" ]; then
    echo "üì¶ Using virtual environment..."
    source venv/bin/activate
    # Check if python is available in venv
    if command -v python >/dev/null 2>&1; then
        PYTHON_CMD="python"
    elif command -v python3 >/dev/null 2>&1; then
        PYTHON_CMD="python3"
    else
        echo "‚ö†Ô∏è  No Python found in venv, using system python3"
        PYTHON_CMD="python3"
    fi
else
    PYTHON_CMD="python3"
fi

# Test provider connectivity without full HA setup
$PYTHON_CMD <<EOF
import asyncio
import aiohttp
import sys
sys.path.insert(0, '.')

# Import the provider directly to avoid HA dependencies
from custom_components.flavor_of_the_day.providers.culvers import CulversProvider
from custom_components.flavor_of_the_day.providers.oscars import OscarsProvider

async def test_providers():
    async with aiohttp.ClientSession() as session:
        print('üè™ Testing Culver\'s Provider...')
        provider = CulversProvider(session, {})

        try:
            # Test location search first
            locations = await provider.search_locations('Madison', 'WI')
            print(f'  Location search: ‚úÖ Found {len(locations)} locations')

            if locations:
                location = locations[0]
                print(f'  Test location: {location.name} ({location.store_id})')

                # Test getting specific location details
                try:
                    location_details = await provider.get_location_by_id(location.store_id)
                    print(f'  Location details: ‚úÖ Got details for {location_details.name}')
                except Exception as e:
                    print(f'  Location details: ‚ö†Ô∏è  Could not fetch ({str(e)[:50]}...)')

                # Test connection using the found location
                try:
                    can_connect = await provider.test_connection(location.store_id)
                    if can_connect:
                        print('  Connection test: ‚úÖ OK')
                    else:
                        print('  Connection test: ‚ùå Failed')
                except Exception as e:
                    print(f'  Connection test: ‚ùå Failed ({str(e)[:50]}...)')

                # Test getting flavor
                try:
                    flavor = await provider.get_current_flavor(location.store_id)
                    print(f'  Current flavor: ‚úÖ {flavor.name}')
                    if flavor.description:
                        print(f'    Description: {flavor.description[:100]}...')
                except Exception as e:
                    print(f'  Current flavor: ‚ö†Ô∏è  Could not fetch ({str(e)[:50]}...)')
            else:
                print('  ‚ö†Ô∏è  No locations found to test connection')

        except Exception as e:
            print(f'  ‚ùå Provider test failed: {e}')

        print('\nüè™ Testing Oscar\'s Provider...')
        provider = OscarsProvider(session, {})

        try:
            # Test location search first
            locations = await provider.search_locations('')
            print(f'  Location search: ‚úÖ Found {len(locations)} locations')

            if locations:
                location = locations[0]
                print(f'  Test location: {location.name} ({location.store_id})')

                # Test getting specific location details
                try:
                    location_details = await provider.get_location_by_id(location.store_id)
                    print(f'  Location details: ‚úÖ Got details for {location_details.name}')
                except Exception as e:
                    print(f'  Location details: ‚ö†Ô∏è  Could not fetch ({str(e)[:50]}...)')

                # Test getting flavor
                try:
                    flavor = await provider.get_current_flavor(location.store_id)
                    print(f'  Current flavor: ‚úÖ {flavor.name}')
                except Exception as e:
                    print(f'  Current flavor: ‚ö†Ô∏è  Could not fetch ({str(e)[:50]}...)')
            else:
                print('  ‚ö†Ô∏è  No locations found to test connection')

        except Exception as e:
            print(f'  ‚ùå Provider test failed: {e}')

if __name__ == '__main__':
    asyncio.run(test_providers())
EOF

echo ""
echo "Provider connectivity test complete!"
